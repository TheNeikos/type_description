name: CI

on:
  push:
    branches: [master, staging, trying]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.60.0
          - stable
          - beta
          # - nightly

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: swatinem/rust-cache@v1
      - name: cargo-check
        uses: actions-rs/cargo@v1
        with:
          command: check

  flake-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v10
        with:
          name: type-description
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - run: nix --extra-experimental-features "nix-command flakes" flake check

  license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Check License Lines
        uses: kt3k/license_checker@v1.0.6

  deny:
    name: deny
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
    - uses: actions/checkout@v3
    - name: cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}


  fmt:
    name: format
    needs: check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
      - run: rustup component add rustfmt
      - name: cargo-fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check




  doc:
    name: doc
    runs-on: ubuntu-latest
    needs: check

    steps:
      - uses: actions/checkout@v3
      - name: cargo-doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all-features --workspace --no-deps --document-private-items


  test:
    needs: check
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.60.0
          - stable
          - beta
          # - nightly
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: swatinem/rust-cache@v1
      - name: cargo-test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-features


  clippy:
    needs: check
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          override: true
      - uses: swatinem/rust-cache@v1
      - run: rustup component add clippy
      - name: cargo-clippy
        run: cargo clippy --all --all-targets --all-features -- -D warnings

  outdated:
    needs: check
    name: outdated
    runs-on: ubuntu-latest

    # We allow outdated packages because there's dependabot here and that should
    # do its job after a PR hits master
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          override: true
      - uses: swatinem/rust-cache@v1
      - run: cargo install --locked cargo-outdated
      - name: cargo-outdated
        run: cargo outdated --root-deps-only --color always

  cross:
    name: cross
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          # TIER 1
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          target: ${{ matrix.target }}
          override: true
      - uses: swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target=${{ matrix.target }}

  cross-test:
    name: cross-test
    needs: cross
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.60.0
          target: ${{ matrix.target }}
          override: true
      - uses: swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --target=${{ matrix.target }}

  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: CI
    if: ${{ success() }}
    needs:
      - check
      - flake-check
      - license
      - clippy
      - deny
      - doc
      - fmt
      - outdated
      - test
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
